// Number of different lines of inputs (a line is composed by an input for a character and one for a frequency) 
var inputs = 1;

// Default code for an line of inputs
var divInput = '<div class="form-group form-row"><div class="col" data-content="Character missing" data-placement="left"><input type="text" class="carinput form-control form-control-sm" placeholder="Character"></div><div class="col" data-content="Weight missing" data-placement="right"><input type="number" class="occinput form-control form-control-sm" min="0" step="any" placeholder="Weight"><div></div>';

// Frequencies of the 26 latin characters in the French language
// It was generated by typing the values found on the web into this page
var frenchJsonDict = '[[99.97,[40.28,[17.3,[8.4,"a"],[8.9,[4.18,"d"],[4.72,[2.18,[1.06,"b"],[1.12,"f"]],[2.54,[1.27,"g"],[1.27,[0.51,[0.21,[0.09,[0.04,"w"],[0.05,"k"]],[0.12,"z"]],[0.3,"y"]],[0.76,[0.31,"j"],[0.45,"x"]]]]]]],[22.98,[11,[5.26,"o"],[5.74,"u"]],[11.98,[5.97,[2.96,"m"],[3.01,"p"]],[6.01,"l"]]]],[59.69,[27.01,[12.81,[6.26,[3.03,"c"],[3.23,[1.32,"v"],[1.91,[0.92,"h"],[0.99,"q"]]]],[6.55,"r"]],[14.2,[7.07,"t"],[7.13,"n"]]],[32.68,[15.42,[7.34,"i"],[8.08,"s"]],[17.26,"e"]]]]]';

var codes;
var dictListName = "dictList";

// Adds to the HTML the first row of inputs
$('#inputsValues').append(divInput);

// Initializes the tooltips when a field is missing in a row of inputs
$('[data-toggle]').popover();


function manageStorage(key, string=""){
	if(string){
		localStorage.setItem(key, string);
		return true;
	}else{
		var value;
		if(value = localStorage.getItem(key)){
			return value;
		}else{
			return false;
		}
	}
}

function saveDict(dict, label){
	dict = JSON.stringify(dict);
	manageStorage(label, dict);
	var dictList;
	console.log("Dictionnary saved.")
	if(dictList = manageStorage(dictListName)){
		dictList = dictList.split(".");
		if(dictList.indexOf(label) == -1){
			dictList.push(label);
			dictList = dictList.join(".");
			manageStorage(dictListName, dictList);
			console.log("New key added in dictionnary list.");
		}
	}else{
		manageStorage(dictListName, label);
		console.log("No previous dictionnary list existed. Created a new one.");
	}
	updateDictSelect();
}

function removeDict(label){
	localStorage.removeItem(label);
	var listDicts = localStorage.getItem(dictListName).split(".");
	var indexLabel = listDicts.indexOf(label);
	listDicts.splice(indexLabel, 1);
	listDicts = listDicts.join(".");
	if(listDicts.length > 0){
		manageStorage(dictListName, listDicts);
	}else{
		localStorage.clear();
	}
	updateDictSelect();
}

function updateDictSelect(){
	$("#savedDicts").html("");
	var listDicts = localStorage.getItem(dictListName);
	if(listDicts){
		listDicts = listDicts.split(".");
		$('#savedDicts').append("<option disabled selected>Choose a tree</option>");
		for(var value in listDicts){
			$("#savedDicts").append(`<option value="${listDicts[value]}">${listDicts[value]}</option>`);
		}
	}else{
		$('#savedDicts').append("<option disabled selected>No tree saved</option>");
	}
}

/**
Used to check whether an input is empty or not.
@param item - A jQuery's input selector.
*/
function isFieldEmpty(item){
	if(item.val()){
		return false;
	}else{
		return true;
	}
}

function createCodeFromTree(tree){

	var codes = {};

	function seekInBranch(node, code){

		if(Array.isArray(node[1])){
			seekInBranch(node[1], (code+"1"));
		}else{
			codes[node[1]] = code;
			console.log(`Found character, adding "${code}" for ${node[1]}`);
		}

		if(node[2]){

			if(Array.isArray(node[2])){
				seekInBranch(node[2], (code+"0"));
			}else{
				codes[node[2]] = code;
				console.log(`Found character, adding "${code} for ${node[2]}"`);
			}

		}

	}

	seekInBranch(tree[0], "");

	console.log(`Codes: ${JSON.stringify(codes)}`);
	return codes;

}

function createTreeFromArray(table){

	var decimals = 4;

	table.sort(function(a,b){
		return a[0]-b[0];
	});

	var i = 0;
	var iterateMax = table.length;
	console.log(`Iterations max : ${iterateMax}`);
	
	while(table.length > 1 && i <= iterateMax){
		var newWeight = parseFloat((table[0][0] + table[1][0]).toFixed(decimals));
		var newNode = [newWeight, table[0], table[1]];
		table.push(newNode);
		table.splice(0,2);
		table.sort(function(a,b){
			return a[0]-b[0];
		});
		i++;
	}

	console.log(`Tree: ${JSON.stringify(table)}`);
	return table;

}

function checkInputs(){
	
	var results = [];
	
	$('#inputsValues > div').each(function(){
		if(!isFieldEmpty($(this).find(".carinput")) && !isFieldEmpty($(this).find(".occinput"))){
			var car = $(this).find("div > .carinput").val();
			var occ = parseFloat($(this).find("div > .occinput").val());
			results.push([occ, car]);
		}else if(!isFieldEmpty($(this).find(".carinput"))){
			$(this).find(".occinput").addClass("is-invalid");
			$(this).find(".occinput").parent().popover("show");
		}else if(!isFieldEmpty($(this).find(".occinput"))){
			$(this).find(".carinput").addClass("is-invalid");
			$(this).find(".carinput").parent().popover("show");
		}
	});

	console.log(`${JSON.stringify(results)} : ${results.length} items`);
	return results;
}

function manageInputs(item){

	if(isFieldEmpty(item.find(".carinput")) && isFieldEmpty(item.find(".occinput")) && inputs > 1){
		item.remove();
		inputs--;
	}else if(item.is(":last-child")){
		item.parent().append(divInput);
		inputs++;
	}
	console.log(`${inputs} inputs.`);

	manageSubmitDict();

}

function manageSubmitDict(){

	if(inputs > 1){
		$('#submitDict').removeAttr("disabled");
		console.log("Enabling submit dictionnary button");
	}else{
		$('#submitDict').attr("disabled", "disabled");
		console.log("Disabling submit dictionnary button");
	}

}

function createHtmlTableFromObject(obj){
	var html = $("<table></table>");
	html.addClass("table table-striped table-condensed");
	html.html("<thead><tr><th>Character</th><th>Code</th></tr></thead><tbody></tbody>");
	html.find("thead").addClass("thead-light");
	for(var key in obj){
		html.children("tbody").append(`<tr><td>"${key}"</td><td>${obj[key]}</td></tr>`);
	}
	return html;
}

$('body').on('change', 'input.carinput, input.occinput', function(){
	manageInputs($(this).parent().parent());
	if(!isFieldEmpty($(this))){
		$(this).parent().popover("hide");
		$(this).parent().parent().find(".is-invalid").removeClass("is-invalid");
	}
});

$('#dict').on('submit', function(event){
	event.preventDefault();

	var results = checkInputs();
	
	results = createTreeFromArray(results);
	if(results.length > 0){

		codes = createCodeFromTree(results);
		$('#dictCodes').html(createHtmlTableFromObject(codes));

		$('#saveDict').removeAttr("disabled");
		$('#dictCodesCollapse').collapse("show");

	}

});

$('#dictNameCollapse').on('hide.bs.collapse', function(){
	var userDictName = $('#dictName').val();
	$('#dictName').val("");
	saveDict(codes, userDictName);
});

$('#dictNameCollapse').on('shown.bs.collapse', function(){
	$('#dictName').focus();
});

$("#savedDicts").on("change", function(){
	$("#loadDictButton").removeAttr("disabled");
	$('#deleteDictButton').removeAttr("disabled");
});

$('#loadDict').on("submit", function(event){
	event.preventDefault();
	var jsonDict = JSON.parse(manageStorage($('#savedDicts').val()));
	$('#dictCodes').html(createHtmlTableFromObject(jsonDict));
	$('#dictCodesCollapse').collapse("show");
});

$("#deleteDictButton").on("click", function(){
	removeDict($('#savedDicts').val());
});

$(document).ready(function(){
	updateDictSelect();
});